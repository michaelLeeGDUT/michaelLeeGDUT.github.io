/*!
 * Chirpy Theme Misc JavaScript
 * Functionality for archives, category, and tag pages
 */

// Misc pages initialization
document.addEventListener('DOMContentLoaded', function() {
    initMiscPage();
});

function initMiscPage() {
    const pageType = detectPageType();
    
    switch (pageType) {
        case 'archives':
            initArchivesPage();
            break;
        case 'category':
            initCategoryPage();
            break;
        case 'tag':
            initTagPage();
            break;
        default:
            initGenericPage();
    }
    
    // Common functionality for all misc pages
    initCommonFeatures();
}

// Detect the current page type
function detectPageType() {
    if (document.querySelector('.archives')) return 'archives';
    if (document.querySelector('.category-page')) return 'category';
    if (document.querySelector('.tag-page')) return 'tag';
    return 'generic';
}

// Archives page functionality
function initArchivesPage() {
    initArchiveTimeline();
    initArchiveSearch();
    initYearNavigation();
}

function initArchiveTimeline() {
    const timelineItems = document.querySelectorAll('.timeline-item');
    
    // Add scroll-triggered animations
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(function(entry) {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate');
            }
        });
    }, { threshold: 0.1 });
    
    timelineItems.forEach(function(item) {
        observer.observe(item);
    });
}

function initArchiveSearch() {
    const searchInput = document.querySelector('#archive-search');
    const archiveItems = document.querySelectorAll('.archive-item');
    
    if (!searchInput) return;
    
    searchInput.addEventListener('input', function() {
        const query = this.value.toLowerCase().trim();
        let visibleCount = 0;
        
        archiveItems.forEach(function(item) {
            const title = item.querySelector('.post-title');
            const date = item.querySelector('.post-date');
            const excerpt = item.querySelector('.post-excerpt');
            
            if (!title) return;
            
            const titleText = title.textContent.toLowerCase();
            const dateText = date ? date.textContent.toLowerCase() : '';
            const excerptText = excerpt ? excerpt.textContent.toLowerCase() : '';
            
            if (titleText.includes(query) || dateText.includes(query) || excerptText.includes(query)) {
                item.style.display = 'block';
                visibleCount++;
                highlightSearchTerm(title, query);
                if (excerpt) highlightSearchTerm(excerpt, query);
            } else {
                item.style.display = 'none';
            }
        });
        
        updateArchiveResultsCount(visibleCount);
    });
}

function initYearNavigation() {
    const yearButtons = document.querySelectorAll('.year-nav button');
    const archiveSections = document.querySelectorAll('.archive-year');
    
    yearButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            const targetYear = this.dataset.year;
            
            // Update active button
            yearButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Show/hide archive sections
            archiveSections.forEach(function(section) {
                if (targetYear === 'all' || section.dataset.year === targetYear) {
                    section.style.display = 'block';
                } else {
                    section.style.display = 'none';
                }
            });
        });
    });
}

// Category page functionality
function initCategoryPage() {
    initCategoryPostList();
    initCategoryStats();
    initRelatedCategories();
}

function initCategoryPostList() {
    const posts = document.querySelectorAll('.category-post');
    
    posts.forEach(function(post) {
        post.addEventListener('mouseenter', function() {
            this.style.transform = 'translateX(10px)';
            this.style.background = 'rgba(0,0,0,0.02)';
        });
        
        post.addEventListener('mouseleave', function() {
            this.style.transform = 'translateX(0)';
            this.style.background = 'transparent';
        });
    });
}

function initCategoryStats() {
    const postCount = document.querySelectorAll('.category-post').length;
    const firstPost = document.querySelector('.category-post:last-child .post-date');
    const lastPost = document.querySelector('.category-post:first-child .post-date');
    
    const statsContainer = document.querySelector('.category-stats');
    if (statsContainer && firstPost && lastPost) {
        statsContainer.innerHTML = `
            <div class="stat">
                <span class="label">Posts:</span>
                <span class="value">${postCount}</span>
            </div>
            <div class="stat">
                <span class="label">First Post:</span>
                <span class="value">${firstPost.textContent}</span>
            </div>
            <div class="stat">
                <span class="label">Latest Post:</span>
                <span class="value">${lastPost.textContent}</span>
            </div>
        `;
    }
}

function initRelatedCategories() {
    const relatedCategories = document.querySelectorAll('.related-category');
    
    relatedCategories.forEach(function(category) {
        category.addEventListener('click', function() {
            // Add click animation
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = 'scale(1)';
            }, 150);
        });
    });
}

// Tag page functionality
function initTagPage() {
    initTagPostList();
    initTagCloud();
    initTagStats();
}

function initTagPostList() {
    const posts = document.querySelectorAll('.tag-post');
    
    posts.forEach(function(post, index) {
        // Stagger animation
        setTimeout(() => {
            post.classList.add('visible');
        }, index * 100);
        
        post.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
            this.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
        });
        
        post.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = 'none';
        });
    });
}

function initTagCloud() {
    const relatedTags = document.querySelectorAll('.related-tag');
    
    relatedTags.forEach(function(tag) {
        const postCount = parseInt(tag.dataset.posts || 0);
        const maxSize = 1.5;
        const minSize = 0.8;
        const maxPosts = Math.max(...Array.from(relatedTags).map(t => parseInt(t.dataset.posts || 0)));
        
        const scale = minSize + (maxSize - minSize) * (postCount / maxPosts);
        tag.style.transform = `scale(${scale})`;
        
        tag.addEventListener('mouseenter', function() {
            this.style.transform = `scale(${scale * 1.1})`;
        });
        
        tag.addEventListener('mouseleave', function() {
            this.style.transform = `scale(${scale})`;
        });
    });
}

function initTagStats() {
    const postCount = document.querySelectorAll('.tag-post').length;
    const relatedTagsCount = document.querySelectorAll('.related-tag').length;
    
    const statsContainer = document.querySelector('.tag-stats');
    if (statsContainer) {
        statsContainer.innerHTML = `
            <div class="stat">
                <span class="label">Posts with this tag:</span>
                <span class="value">${postCount}</span>
            </div>
            <div class="stat">
                <span class="label">Related tags:</span>
                <span class="value">${relatedTagsCount}</span>
            </div>
        `;
    }
}

// Generic page functionality
function initGenericPage() {
    // Basic functionality for other misc pages
    initBasicAnimations();
}

function initBasicAnimations() {
    const animatedElements = document.querySelectorAll('.animate-on-scroll');
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(function(entry) {
            if (entry.isIntersecting) {
                entry.target.classList.add('animated');
            }
        });
    });
    
    animatedElements.forEach(function(element) {
        observer.observe(element);
    });
}

// Common features for all misc pages
function initCommonFeatures() {
    initBackToTop();
    initSortingAndFiltering();
    initLoadMore();
}

function initBackToTop() {
    const backToTop = document.querySelector('#back-to-top');
    
    if (!backToTop) {
        const button = document.createElement('button');
        button.id = 'back-to-top';
        button.innerHTML = '<i class="fas fa-arrow-up"></i>';
        button.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            cursor: pointer;
            display: none;
            z-index: 1000;
        `;
        document.body.appendChild(button);
    }
    
    const button = document.querySelector('#back-to-top');
    
    window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
            button.style.display = 'block';
        } else {
            button.style.display = 'none';
        }
    });
    
    button.addEventListener('click', function() {
        window.scrollTo({ top: 0, behavior: 'smooth' });
    });
}

function initSortingAndFiltering() {
    const sortSelect = document.querySelector('#posts-sort');
    const filterSelect = document.querySelector('#posts-filter');
    
    if (sortSelect) {
        sortSelect.addEventListener('change', function() {
            sortPosts(this.value);
        });
    }
    
    if (filterSelect) {
        filterSelect.addEventListener('change', function() {
            filterPosts(this.value);
        });
    }
}

function sortPosts(sortBy) {
    const container = document.querySelector('.posts-container');
    if (!container) return;
    
    const posts = Array.from(container.children);
    
    posts.sort(function(a, b) {
        switch (sortBy) {
            case 'date-desc':
                return new Date(b.dataset.date) - new Date(a.dataset.date);
            case 'date-asc':
                return new Date(a.dataset.date) - new Date(b.dataset.date);
            case 'title':
                return a.querySelector('.post-title').textContent.localeCompare(
                    b.querySelector('.post-title').textContent
                );
            default:
                return 0;
        }
    });
    
    posts.forEach(function(post) {
        container.appendChild(post);
    });
}

function filterPosts(filterBy) {
    const posts = document.querySelectorAll('.post-item');
    
    posts.forEach(function(post) {
        if (filterBy === 'all' || post.classList.contains(filterBy)) {
            post.style.display = 'block';
        } else {
            post.style.display = 'none';
        }
    });
}

function initLoadMore() {
    const loadMoreBtn = document.querySelector('#load-more');
    const postsContainer = document.querySelector('.posts-container');
    
    if (!loadMoreBtn || !postsContainer) return;
    
    loadMoreBtn.addEventListener('click', function() {
        this.textContent = 'Loading...';
        this.disabled = true;
        
        // Simulate loading more posts
        setTimeout(() => {
            this.textContent = 'Load More';
            this.disabled = false;
            // In a real implementation, you would load more posts here
        }, 1000);
    });
}

// Utility functions
function highlightSearchTerm(element, term) {
    if (!term) {
        element.innerHTML = element.textContent;
        return;
    }
    
    const regex = new RegExp(`(${term})`, 'gi');
    element.innerHTML = element.textContent.replace(regex, '<mark>$1</mark>');
}

function updateArchiveResultsCount(count) {
    const resultsCount = document.querySelector('#archive-results-count');
    if (resultsCount) {
        resultsCount.textContent = `${count} posts found`;
    }
}

// Export for global access
window.ChirpyMisc = {
    initMiscPage: initMiscPage,
    initArchivesPage: initArchivesPage,
    initCategoryPage: initCategoryPage,
    initTagPage: initTagPage
};