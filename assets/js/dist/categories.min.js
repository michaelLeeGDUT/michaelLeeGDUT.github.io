/*!
 * Chirpy Theme Categories Page JavaScript
 * Functionality for the categories listing page
 */

// Categories page initialization
document.addEventListener('DOMContentLoaded', function() {
    initCategoriesPage();
});

function initCategoriesPage() {
    // Initialize category filtering
    initCategoryFilter();
    
    // Initialize category search
    initCategorySearch();
    
    // Initialize category cards
    initCategoryCards();
    
    // Initialize post count animations
    initPostCountAnimations();
}

// Category filtering functionality
function initCategoryFilter() {
    const filterButtons = document.querySelectorAll('.category-filter');
    const categoryItems = document.querySelectorAll('.category-item');
    
    filterButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            const filter = this.dataset.filter;
            
            // Update active filter
            filterButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Filter categories
            categoryItems.forEach(function(item) {
                if (filter === 'all' || item.classList.contains('category-' + filter)) {
                    item.style.display = 'block';
                    item.style.opacity = '1';
                } else {
                    item.style.opacity = '0';
                    setTimeout(() => {
                        item.style.display = 'none';
                    }, 300);
                }
            });
            
            // Update URL
            const url = new URL(window.location);
            if (filter === 'all') {
                url.searchParams.delete('filter');
            } else {
                url.searchParams.set('filter', filter);
            }
            window.history.pushState({}, '', url);
        });
    });
    
    // Apply filter from URL on load
    const urlParams = new URLSearchParams(window.location.search);
    const filterParam = urlParams.get('filter');
    if (filterParam) {
        const filterButton = document.querySelector(`[data-filter="${filterParam}"]`);
        if (filterButton) {
            filterButton.click();
        }
    }
}

// Category search functionality
function initCategorySearch() {
    const searchInput = document.querySelector('#category-search');
    const categoryItems = document.querySelectorAll('.category-item');
    
    if (!searchInput) return;
    
    searchInput.addEventListener('input', function() {
        const query = this.value.toLowerCase().trim();
        
        categoryItems.forEach(function(item) {
            const categoryName = item.querySelector('.category-name');
            const categoryDesc = item.querySelector('.category-description');
            
            if (!categoryName) return;
            
            const nameText = categoryName.textContent.toLowerCase();
            const descText = categoryDesc ? categoryDesc.textContent.toLowerCase() : '';
            
            if (nameText.includes(query) || descText.includes(query)) {
                item.style.display = 'block';
                highlightSearchTerm(categoryName, query);
                if (categoryDesc) {
                    highlightSearchTerm(categoryDesc, query);
                }
            } else {
                item.style.display = 'none';
            }
        });
        
        // Update results count
        updateResultsCount();
    });
}

function highlightSearchTerm(element, term) {
    if (!term) {
        element.innerHTML = element.textContent;
        return;
    }
    
    const regex = new RegExp(`(${term})`, 'gi');
    element.innerHTML = element.textContent.replace(regex, '<mark>$1</mark>');
}

function updateResultsCount() {
    const visibleItems = Array.from(document.querySelectorAll('.category-item')).filter(item => 
        item.style.display !== 'none'
    );
    
    const resultsCount = document.querySelector('#results-count');
    if (resultsCount) {
        resultsCount.textContent = `${visibleItems.length} categories found`;
    }
}

// Category cards functionality
function initCategoryCards() {
    const categoryCards = document.querySelectorAll('.category-card');
    
    categoryCards.forEach(function(card) {
        // Add hover effects
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-5px)';
            this.style.boxShadow = '0 8px 16px rgba(0,0,0,0.1)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = '0 2px 4px rgba(0,0,0,0.05)';
        });
        
        // Add click handling
        card.addEventListener('click', function(e) {
            if (e.target.tagName !== 'A') {
                const link = this.querySelector('a');
                if (link) {
                    window.location.href = link.href;
                }
            }
        });
    });
}

// Post count animations
function initPostCountAnimations() {
    const postCounts = document.querySelectorAll('.post-count');
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(function(entry) {
            if (entry.isIntersecting) {
                animateCount(entry.target);
                observer.unobserve(entry.target);
            }
        });
    });
    
    postCounts.forEach(function(counter) {
        observer.observe(counter);
    });
}

function animateCount(element) {
    const finalCount = parseInt(element.textContent);
    const duration = 1000; // 1 second
    const steps = 30;
    const stepValue = finalCount / steps;
    const stepDuration = duration / steps;
    
    let currentCount = 0;
    
    const counter = setInterval(function() {
        currentCount += stepValue;
        
        if (currentCount >= finalCount) {
            element.textContent = finalCount;
            clearInterval(counter);
        } else {
            element.textContent = Math.floor(currentCount);
        }
    }, stepDuration);
}

// Category sorting functionality
function initCategorySorting() {
    const sortSelect = document.querySelector('#category-sort');
    const categoryContainer = document.querySelector('.categories-container');
    
    if (!sortSelect || !categoryContainer) return;
    
    sortSelect.addEventListener('change', function() {
        const sortBy = this.value;
        const categories = Array.from(categoryContainer.children);
        
        categories.sort(function(a, b) {
            switch (sortBy) {
                case 'name':
                    const nameA = a.querySelector('.category-name').textContent;
                    const nameB = b.querySelector('.category-name').textContent;
                    return nameA.localeCompare(nameB);
                
                case 'posts':
                    const countA = parseInt(a.querySelector('.post-count').textContent);
                    const countB = parseInt(b.querySelector('.post-count').textContent);
                    return countB - countA; // Descending order
                
                case 'recent':
                    const dateA = new Date(a.dataset.lastPost || 0);
                    const dateB = new Date(b.dataset.lastPost || 0);
                    return dateB - dateA; // Most recent first
                
                default:
                    return 0;
            }
        });
        
        // Re-append sorted categories
        categories.forEach(function(category) {
            categoryContainer.appendChild(category);
        });
    });
}

// Category statistics
function initCategoryStats() {
    const totalCategories = document.querySelectorAll('.category-item').length;
    const totalPosts = Array.from(document.querySelectorAll('.post-count')).reduce(function(sum, element) {
        return sum + parseInt(element.textContent);
    }, 0);
    
    const statsContainer = document.querySelector('.category-stats');
    if (statsContainer) {
        statsContainer.innerHTML = `
            <div class="stat">
                <span class="stat-number">${totalCategories}</span>
                <span class="stat-label">Categories</span>
            </div>
            <div class="stat">
                <span class="stat-number">${totalPosts}</span>
                <span class="stat-label">Total Posts</span>
            </div>
        `;
    }
}

// Initialize additional features
document.addEventListener('DOMContentLoaded', function() {
    initCategorySorting();
    initCategoryStats();
});

// Export for global access
window.ChirpyCategories = {
    initCategoriesPage: initCategoriesPage,
    initCategoryFilter: initCategoryFilter,
    initCategorySearch: initCategorySearch,
    initCategoryCards: initCategoryCards
};